import re
s = '100 NORTH BROAD. ROAD.
re.sub('ROAD$', 'RD.', s)  changes the last road to rd
$ means end of string
^ means start of string
? optional character
\d digit
\D non digit
\d+ one or more digits
\d* zero or more digits
https://docs.python.org/3/howto/regex.html#regex-howto
[] set of characters to match [abc] [a-d] [^abc] characters other than abc. ^ only has special meaning in the first position
\s white space character
\w alphanumeric character
* 0 or more
+ 1 or more
? 0 or 1
a/{1,3}b  matches a followed by 1-3 / and the b

(CM|CD|D?C?C?C?) one of the groups can match
re.sub('\\bROAD$', 'RD.', s)  \b means word boundary must be here. It needs to be escaped
re.sub(r'\bROAD\b', 'RD.', s)  the r makes the string a raw string and nothing needs to be escaped.  so we match word spaces at start and end of the phrase

pattern = '^M{0,3}$' matches 0,1,2 or 3 M from start of string to end of string
pattern = '^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'
            M(0-3)(cm or cd or d or 0-3c)(xc,xy,l or 0-3x)

re.search(pattern, 'MDLV')

Verbose Regex
    Whitespace is ignored, if need to match, then need to escape it
    # to comment rest of the line

    pattern = '''
    ^                   # beginning of string
    M{0,3}              # thousands - 0 to 3 Ms
    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 Cs),
                        #            or 500-800 (D, followed by 0 to 3 Cs)
    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 Xs),
                        #        or 50-80 (L, followed by 0 to 3 Xs)
    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 Is),
                        #        or 5-8 (V, followed by 0 to 3 Is)
    $                   # end of string
    '''

    re.search(pattern, 'M', re.VERBOSE)


phonePattern = re.compile(r'''
                # don't match beginning of string, number can start anywhere
    (\d{3})     # area code is 3 digits (e.g. '800')
    \D*         # optional separator is any number of non-digits
    (\d{3})     # trunk is 3 digits (e.g. '555')
    \D*         # optional separator
    (\d{4})     # rest of number is 4 digits (e.g. '1212')
    \D*         # optional separator
    (\d*)       # extension is optional and can be any number of digits
    $           # end of string
    ''', re.VERBOSE)

pattern.search() and pattern.match() both return match objects (None if not found)
search checks anywhere in the string and and match() only in the beginning
findall() returns list of matching strings

match.group() returns the matching string
start() end() index,  span() the tuple of start and end

re.match() and re.findall() and re.search() also exist
phonePattern.search('work 1-(800) 555.1212 #1234').groups() 
   ('800', '555', '1212', '1234')
if search doesnt match then groups throws an exception
What is in the () will be obtained in groups


