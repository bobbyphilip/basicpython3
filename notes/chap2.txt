No need to declare type of variables
Boolean  
    True/False ( can be treated as numbers 1/0)
    if(0) false, everything else true

Number 
   integer float fractions 
 type(2.0) float type(1) int
   int(2.3)  = 2  ( truncates the decimal part)
   no separate type of long/int
   11/2=5.5 (floating point division) 11//2 = 5  -11//2=-6 11.1//2 =5.0 (because of 11.1) 11**2 =121
   import fractions;
   fractions.Fraction(1,3)*2 Fraction(2,3)
   import math
   math.pi
   math.sin(math.pi)

List 
  ordered sequence
  list = ['a1', 'b2', 'c3', 'd4' 'e5']
   list[2] c3
   list[-1] e5 // length -1
   list[-3] c3
   list[1:3] [â€™b2â€™,â€™c3â€™]
   list[1:-1] ['b2', 'c3', 'd4']
   list[:3] [a1, b2, c3]
   list[3:] [d4, e5]
   list[:] [a1 b2 c3 d4 e5] // this creates a new list
   can add elements of different types ['a', True,3.1]
   list +[True, 'f6'] // new list
   list.append(True) // single element (the element can be a list, it will be considered as an element
   list.extend(['r6'])  // takes an argument as list, the elements of the list will be added to the list individually
   list.insert(0,'Ã¼') // insert at position 0
   list.count('a1') number of occurences
   'a1' in list True/False
   list.index('a1')  0
   list.index('yyy') ValueError: not in list !!

   del list[1] // removes the element at index 1 and shifts everything
   list.remove('b2') removes first  occurence // value err if not found
   list.pop() removes last element
   list.pop(1) removes element at index 1
   if([]) false if([False]) true


tuple  
    ordered IMMUTABLE  sequence of values
    tuple = ('a1', 'b2', 'c3', 'd4' 'e5')
    tuple[2] etc like lists
    slicing also works since it creates a new tuple
    index(), in work since it doesnt change
    tuples are faster, can be used as dictionary keys
    tuple = ('s',)  we need the , at the end if only one element
    v = ('a', 2, True)
    (x, y, z) = v
    x is a y is 2
    (MON,TUE,WED) = range(3)
    MON is 0, TUE is 1


sets unordered bags of unique value
   set = {1,2,3}
   set = set(list) // only unique values will be present
   empty set can be created with set() // not with {} which creates a dictionary
   add() an element and update() with another set and adds indiv elements (also with list)
   discard() remove() an element. remove() will throw KeyError if missing
   pop()  randomly removes an element since there is no order
   clear() empties the set
   in union() intesection() difference() -> there in a not b, symmetric_difference() only in a and only in b, issubset()


dictionaries 
    unordered bags of key-value pairs
    dict = {'mykey':'myvalue', 'otherkey':'othervalue'}
    dict['mykey']  myvalue
    if missing then KeyError
    dict['key3']= 'val3'   to add or change a key
    values and keys dont have to be the same type can mix and match

None is a null value, it isnt the same as False or 0. None ==None is true everything else false

sets list and dictionaries all have len()


String 
byte and byte array
    
