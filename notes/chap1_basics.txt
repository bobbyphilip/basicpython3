Optional and named arguments
    def function_name(size, kib=True)
      If value is specified in function def, it is optional. you can call a function with named params in any order. 
      However once a named param is written, all further arguments must also be named
if there is no explicit return in a function, it returns None (python null value)

''' Triple quotes indicate multi lined string
docstring must be the first thing after function definition

import humansize
print(humansize.approximate_size(4096, True))
print(humansize.approximate_size.__doc__)

Everything in python is an object and can have attributes and methods. All functions have a built-in attribute __doc__
Functions are first class objects in python
Modules are first class objects

Code blocks specified by indentation, it needs to be consistent, no parantheises needed around if expressions

try, except blocks  and raise. Python functions dont declare the exceptions they might raise

try:
  import chardet
except ImportError:
  chardet = None

You cant reference a variable which hasnt been assigned a value

if __name__ == '__main__':
If you import a module, then its __name__ is the module's file name
If run directly, it will be __main__


os.getcwd()
os.chdir('/home/user/folder1')
os.path.join('/home/user/folder1','file') //can add trailing slash
os.path.expanduser('~')  home directory
 can combine path.join with expanduser
(dir,filename) = os.path.split(path)
(name,extension) = os.path.splitext(filename)
os.path.realpath('file') // full path

import glob
glob.glob(’*older/*xml’)  [] of files matching the pattern
metadata = os.stat('feed.xml')
metadata.st_mtime // seconds since unix epoch
import time
time.localtime(metadata.st_mtime) will return a struct with year month etc

 
